// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  image         String?
  role          UserRole  @default(LEARNER)
  isBlocked     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  enrollments   Enrollment[]
  payments      Payment[]
  progress      Progress[]
  courses       Course[]

  @@map("users")
}

model Course {
  id          String    @id @default(cuid())
  title       String
  description String
  price       Float
  image       String?
  introVideo  String?
  duration    String
  difficulty  CourseDifficulty
  category    String
  instructor  String
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  enrollments Enrollment[]
  lessons     Lesson[]
  creatorId   String
  creator     User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@map("courses")
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  videoUrl    String?
  duration    Int      // in minutes
  order       Int
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    Progress[]

  @@map("lessons")
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  enrolledAt DateTime @default(now())
  completedAt DateTime?
  progress  Float    @default(0) // percentage completed

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessonProgress Progress[]
  payment   Payment?

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Progress {
  id         String   @id @default(cuid())
  userId     String
  lessonId   String
  enrollmentId String
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  createdAt  DateTime @default(now())

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson     Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  enrollment Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("progress")
}

model Payment {
  id          String        @id @default(cuid())
  userId      String
  courseId    String?
  enrollmentId String?      @unique
  amount      Float
  currency    String        @default("USD")
  status      PaymentStatus @default(PENDING)
  paymentMethod String
  transactionId String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollment  Enrollment?   @relation(fields: [enrollmentId], references: [id])

  @@map("payments")
}

enum UserRole {
  USER
  ADMIN
  LEARNER
  CREATOR
}

enum CourseDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
